package com.example.booleancatastrophe.model;


import android.util.Log;

import androidx.annotation.NonNull;

import com.firebase.ui.firestore.FirestoreRecyclerOptions;
import com.firebase.ui.firestore.SnapshotParser;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.Timestamp;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.util.ArrayList;
import java.util.HashMap;

/** This class handles the database operations related to experiment forums */
public class ForumManager {

    private static ForumManager forumManager = null;

    private FirebaseFirestore db;
    private CollectionReference questionsRef;
    private CollectionReference repliesRef;
    private static final String TAG = "Forum Manager";

    private HashMap<String, Object> d;

    /* Private constructor - singleton design pattern */
    private ForumManager() {
        this.db = FirebaseFirestore.getInstance();
        this.questionsRef = db.collection("forumquestions");
        this.repliesRef = db.collection("forumreplies");
        d = new HashMap<>();    // Be sure to clear this before sending database data mappings
    }

    /* Gets the singleton instance of this manager class - lazy construction */
    public static ForumManager getInstance() {
        if(forumManager == null) {
            forumManager = new ForumManager();
        }
        return forumManager;
    }

    /** Add a forum question to the database - id will be created automatically
     * @param forumQuestion
     * The question to add to the database
     **/
    public void addForumQuestion(ForumQuestion forumQuestion) {
        DocumentReference docRef = questionsRef.document();
        // Set question id after it has been generated by Firestore
        forumQuestion.setId(docRef.getId());

        // Construct the structure of the data entry to put into the database
        d.clear();
        d.put("id", forumQuestion.getId());
        d.put("date", new Timestamp(forumQuestion.getDate()));
        d.put("experimentID", forumQuestion.getExperimentID());
        d.put("posterID", forumQuestion.getPosterID());
        d.put("content", forumQuestion.getContent());
        d.put("replyIDs", forumQuestion.getReplyIDs());

        docRef.set(d)
                .addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        Log.d(TAG, "Successfully added forum question");
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Log.w(TAG, "Error adding forum question");
                    }
                });

        d.clear();
    }

    /** Add a forum reply to the database - id will be created automatically
     * @param forumReply
     * The reply to add to the database
     **/
    public void addForumReply(ForumReply forumReply) {
        DocumentReference docRef = repliesRef.document();
        // Set reply id after it has been generated by Firestore
        forumReply.setId(docRef.getId());

        // Construct the structure of the data entry to put into the database
        d.clear();
        d.put("id", forumReply.getId());
        d.put("date", new Timestamp(forumReply.getDate()));
        d.put("questionID", forumReply.getQuestionID());
        d.put("posterID", forumReply.getPosterID());
        d.put("content", forumReply.getContent());

        docRef.set(d)
                .addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        Log.d(TAG, "Successfully added forum reply");
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Log.w(TAG, "Error adding forum reply");
                    }
                });

        d.clear();
    }

    /**
     * Function to get Firestore Recycler Options object with inbuilt query for all questions
     * ordered by date for a specific experiment
     * @param experiment
     * The experiment to which all the questions are linked
     * @return objectFireStoreRecyclerOption
     * The data option that the ForumQuestion recycler view adapter will be linked to / watching
     **/
    public FirestoreRecyclerOptions<ForumQuestion> getAllExperimentQuestions(Experiment experiment) {
        Query query = questionsRef.whereEqualTo("experimentID", experiment.getId()).orderBy("date", Query.Direction.DESCENDING);
        return new FirestoreRecyclerOptions.Builder<ForumQuestion>()
                .setQuery(query, ForumQuestion.class)
                .build();
    }

    /**
     * Function to get Firestore Recycler Options object with inbuilt query for all replies
     * ordered by date for a specific question
     * @param question
     * The question to which all the replies are linked
     * @return objectFireStoreRecyclerOption
     * The data option that the ForumReply recycler view adapter will be linked to / watching
     **/
    public FirestoreRecyclerOptions<ForumReply> getAllQuestionReplies(ForumQuestion question) {
        Query query = repliesRef.whereEqualTo("questionID", question.getId()).orderBy("date", Query.Direction.DESCENDING);
        return new FirestoreRecyclerOptions.Builder<ForumReply>()
                .setQuery(query, ForumReply.class)
                .build();
    }






}
