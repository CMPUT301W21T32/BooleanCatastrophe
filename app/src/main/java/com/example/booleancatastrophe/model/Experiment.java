package com.example.booleancatastrophe.model;

import com.google.firebase.firestore.Exclude;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;

// Class that holds all information about a given experiment, should follow an simple POJO structure
// for easy database usage
public class Experiment implements Serializable {

    // Currently unused ... could refactor constructor and database setup further to make full use
    @Exclude
    private User owner;
    @Exclude
    private ArrayList<Trial> trials = new ArrayList<>();
    @Exclude
    private ArrayList<ForumQuestion> questions = new ArrayList<>();
    @Exclude
    private ExperimentType type;

    private String id;
    private Date date;
    private String region;
    private String description;
    private String ownerID;
    private String strType;
    private Boolean published;
    private Boolean ended;
    private int minTrials;
    private ArrayList<String> blacklistedUserIDs = new ArrayList<>();
    private ArrayList<String> subscribedUserIDs = new ArrayList<>();

    /**
     * Empty required constructor for easier firestore automatic serialization and deserialization
     **/
    public Experiment() {}


    /**
     * Experiment constructor
     * @param description
     * Description about the experiment
     * @param region
     * Region of the experiment, may be empty
     * @param ownerID
     * The owner of this experiment
     * @param minTrials
     * The minimum number of trials before the experiment can be published
     * @param strType
     * The trial type that this experiment will be requiring in string format
     **/
    public Experiment(String description, String region, String ownerID, int minTrials, String strType) {
        id = null;  //id will be generated by the database
        this.date = new Date();    // Date will always be the created date and will be passed as a timestamp to the database
        this.region = region;
        this.description = description;
        this.ownerID = ownerID;
        type = ExperimentType.valueOf(strType);
        this.strType = strType;
        published = true;
        ended = false;
        this.minTrials = minTrials;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Date getDate() {
        return date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    public String getRegion() {
        return region;
    }

    public void setRegion(String region) {
        this.region = region;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getOwnerID() {
        return ownerID;
    }

    public void setOwnerID(String ownerID) {
        this.ownerID = ownerID;
    }

    public String getStrType() {
        return strType;
    }

    public void setStrType(String strType) {
        this.strType = strType;
    }

    public Boolean getPublished() {
        return published;
    }

    public void setPublished(Boolean published) {
        this.published = published;
    }

    public Boolean getEnded() {
        return ended;
    }

    public void setEnded(Boolean ended) {
        this.ended = ended;
    }

    public int getMinTrials() {
        return minTrials;
    }

    public void setMinTrials(int minTrials) {
        this.minTrials = minTrials;
    }

    public ArrayList<String> getBlacklistedUserIDs() {
        return blacklistedUserIDs;
    }

    public void setBlacklistedUserIDs(ArrayList<String> blacklistedUserIDs) {
        this.blacklistedUserIDs = blacklistedUserIDs;
    }

    public ArrayList<String> getSubscribedUserIDs() {
        return subscribedUserIDs;
    }

    public void setSubscribedUserIDs(ArrayList<String> subscribedUserIDs) {
        this.subscribedUserIDs = subscribedUserIDs;
    }

    @Exclude
    public void setType(ExperimentType type) {
        this.type = type;
    }

    @Exclude
    public ExperimentType getType() {
        return type;
    }

    /**
     * This function removes a blacklisted user id from the list
     * @param currentlyBlacklistedID
     * The ID of the user who is currently blacklisted but soon won't be
     **/
    @Exclude
    public void removeBlacklistedUserID(String currentlyBlacklistedID) {
        blacklistedUserIDs.remove(currentlyBlacklistedID);
    }

    /**
     * This function adds a blacklisted user id to the list if they aren't already present there
     * @param toBlackListID
     * The ID of the user who is about to be blacklisted from this experiment
     **/
    @Exclude
    public void addBlacklistedUserID(String toBlackListID) {
        if(!blacklistedUserIDs.contains(toBlackListID)) {
            blacklistedUserIDs.add(toBlackListID);
        }
    }

    @Exclude
    public User getOwner() {
        return owner;
    }

    @Exclude
    public ArrayList<Trial> getTrials() {
        return trials;
    }

    @Exclude
    public ArrayList<ForumQuestion> getQuestions() {
        return questions;
    }

    @Override
    @Exclude
    public boolean equals(Object obj) {
        if(obj == null){ return false; }
        if(!(obj instanceof Experiment)) { return false; }
        Experiment exp = (Experiment) obj;
        //TODO: Good design might suggest that two experiments are equal iff their IDs are equal
        return this.id.equals(exp.id);
    }

    @Override
    @Exclude
    public int hashCode() {
        return this.getId().hashCode();
    }

    @Override
    @Exclude
    public String toString() {
        return new StringBuilder().append(this.type).append("Experiment(")
                                  .append(this.id).append(", \"")
                                  .append(this.description).append("\", ")
                                  .append(this.region).append(", ")
                                  .append(this.owner).append(", ")
                                  .append(this.minTrials).append(")")
                .toString();
    }
}
